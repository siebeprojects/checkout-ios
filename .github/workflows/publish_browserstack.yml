name: 'ACTION: Publish to BrowserStack'

on:
  workflow_call:

  pull_request:
    types:
      - opened
      - reopened
      - synchronize
      - ready_for_review

  push:
    branches:
      - master
      - develop

concurrency: 
  group: publish-browserstack-${{ github.head_ref }}
  cancel-in-progress: true

jobs:
  create-ids:
    name: Create app identifiers
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    outputs:
      custom-id: ${{ steps.custom-id.outputs.custom-id }}
      binary-name: ${{ steps.binary-name.outputs.binary-name }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Replace all non-alphanumeric characters with _
      - name: Create safe branch name
        id: branch
        run: bash .github/scripts/get_branch_name.sh "${{ github.event_name }}" "${{ github.head_ref }}" "${{ github.ref_name }}"

      # Custom id: add iOS_ prefix to safe branch name
      - name: Create custom_id
        id: custom-id
        env:
          prefix: iOS-Checkout-
        run: echo "::set-output name=custom-id::${{ env.prefix }}${{ steps.branch.outputs.safe-branch-name }}"

      # Binary name: add .ipa suffix to safe branch name
      - name: Create binary name
        id: binary-name
        env:
          prefix: Checkout-
          file-extension: .ipa
        run: echo "::set-output name=binary-name::${{ env.prefix }}${{ steps.branch.outputs.safe-branch-name }}${{ env.file-extension }}"

  build-and-upload:
    name: Build & upload
    needs: create-ids
    runs-on: macos-latest
    environment: 
      name: Browserstack
      url: https://app-live.browserstack.com/

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          submodules: true

      # Cleanup

      - name: Install Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.x'
          cache: 'pip'

      - name: Install dependencies
        run: pip install -r .github/scripts/requirements.txt

      - name: Delete binaries from Browserstack
        env:
          BROWSERSTACK_USER: ${{ secrets.BROWSERSTACK_USER }}
          BROWSERSTACK_KEY: ${{ secrets.BROWSERSTACK_KEY }}
        run: python .github/scripts/browserstack_delete.py ${{ needs.create-ids.outputs.custom-id }}

      # Build

      - name: Install dependencies specified in Gemfile
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '2.7'
          bundler-cache: true

      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PROVISIONING_PROFILE_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PROVISIONING_PROFILE_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PROVISIONING_PROFILE_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Build example application
        run: bundle exec fastlane build_example_swift binary:${{ needs.create-ids.outputs.binary-name }}

      - name: Clean up keychain and provisioning profile
        if: ${{ always() }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision

      # Upload to Browserstack

      - name: Upload to BrowserStack
        env: 
          BROWSERSTACK_USER: ${{ secrets.BROWSERSTACK_USER }}
          BROWSERSTACK_KEY: ${{ secrets.BROWSERSTACK_KEY }}
        run: |
          curl \
          -u "${BROWSERSTACK_USER}:${BROWSERSTACK_KEY}" \
          -X POST "https://api-cloud.browserstack.com/app-live/upload" \
          -F "file=@${{ needs.create-ids.outputs.binary-name }}" \
          -F "data={\"custom_id\": \"${{ needs.create-ids.outputs.custom-id }}\"}"

name: Publish to BrowserStack

on:
  pull_request:

concurrency: 
  group: publish-browserstack-${{ github.head_ref }}
  cancel-in-progress: true

jobs:
  create-custom-id:
    name: Create a custom id
    runs-on: ubuntu-latest
    outputs:
      custom-id: ${{ steps.slugify.outputs.custom-id }}

    steps:
      - name: Create a custom id
        id: slugify
        run: |
          echo -n '::set-output name=custom-id::iOS_'
          echo '${GITHUB_BASE_REF} | sed "s/[^[:alnum:]-]/_/g"'

  remove-old-binaries:
    name: Remove old binaries
    uses: ./.github/workflows/browserstack_cleanup.yml
    needs: create-custom-id
    with:
      custom-id: ${{ needs.create-custom-id.outputs.custom-id }}
    secrets:
      MOBILE_MERCHANT_CODE: ${{ secrets.MOBILE_MERCHANT_CODE }}
      MOBILE_MERCHANT_PAYMENT_TOKEN: ${{ secrets.MOBILE_MERCHANT_PAYMENT_TOKEN }}

  build:
    name: BrowserStack
    needs: 
      - create-custom-id
      - remove-old-binaries
    runs-on: macos-latest
    environment: 
      name: Browserstack
      url: https://app-live.browserstack.com/

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Install dependencies specified in Gemfile
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '2.7'
          bundler-cache: true

      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PROVISIONING_PROFILE_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PROVISIONING_PROFILE_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PROVISIONING_PROFILE_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Build example application
        run: bundle exec fastlane build_example_swift binary:${{ needs.create-custom-id.outputs.custom-id }}.ipa

      - name: Clean up keychain and provisioning profile
        if: ${{ always() }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision

      - name: Upload to BrowserStack
        env: 
          BROWSERSTACK_USER: ${{ secrets.BROWSERSTACK_USER }}
          BROWSERSTACK_KEY: ${{ secrets.BROWSERSTACK_KEY }}
        run: |
          bundle exec fastlane browserstack \
          binary:${{ needs.create-custom-id.outputs.custom-id }}.ipa \
          custom_id:${{ needs.create-custom-id.outputs.custom-id }}